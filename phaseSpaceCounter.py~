# the idea here is that you have a circle of
# some radius R centered at the origin of an
# xy coordinate system. The coordinate system 
# is broken down into a grid (like graph paper)
# of some variable unit (xUnit,yUnit), and you
# have to count the number of intersections of
# the grid inside the circle. This problem is
# equivalent to counting the number of 
# momentum states in a thermodynamic system
import numpy as np
from matplotlib import pyplot as plt

xUnit = 1.0
yUnit = 1.0
circR = 10

# the largest number of units you can move
# on the x and y axis
largestX = int(circR/xUnit)
largestY = int(circR/yUnit)

nStates = 0
stateCoords = []
# y(x) = sqrt(R*R - x*x)
for x in xrange(-largestX, largestX+1):
    # y(x) = sqrt(R*R - x*x)
    yMax = np.sqrt(circR*circR - x*x)
    yMin = -yMax
    intersections = int((yMax-yMin)/yUnit) + 1

    for y in xrange(int(yMin/yUnit), int(yMax/yUnit)+1):
        stateCoords.append([x,y])
    nStates += intersections

stateCoords = np.array(stateCoords)
print nStates
print stateCoords
fig = plt.figure(1)
ax = fig.add_subplot(111, aspect='equal')
ax.set_xlim(-1.3*circR, 1.3*circR)
ax.set_ylim(-1.3*circR, 1.3*circR)
ax.grid(color='gray',linestyle='-',linewidth=1, zorder=0)

circle = plt.Circle((0.0,0.0),circR,color='b',fill=False, zorder = 3)
ax.add_artist(circle)
ax.scatter(stateCoords[:,0],stateCoords[:,1],marker='x',color='g', s=40)
plt.show()
