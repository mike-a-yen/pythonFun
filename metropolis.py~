import numpy as np


def Metropolis():
    nThrows = 1000
    x, y = 0,0
    delta = 0.1
    inCircle = 0
    inSquare = 1

    for i in xrange(nThrows):
        deltaX = np.random.uniform(-delta,delta)
        deltaY = np.random.uniform(-delta,delta)
        newX , newY = x+deltaX, y+deltaY
        r = np.sqrt(newX**2+newY**2)
        if r <= 1.:
            inCircle += 1
            inSquare += 1
            x , y = newX, newY
        elif (abs(newX) <= 1. and abs(newY) <= 1.) and (r > 1.):
            inSquare += 1
            x, y = newX, newY
        elif (abs(newX) > 1.) or (abs(newY) > 1.) and (r > 1.):
            inSquare += 1
            x , y = x, y
    return (4.*inCircle)/inSquare

def NotMetropolis():
    nThrows = 1000
    x, y = 0,0
    delta = 0.1
    inCircle = 0
    inSquare = 1
    
    for i in xrange(nThrows):
        deltaX = np.random.uniform(-delta,delta)
        deltaY = np.random.uniform(-delta,delta)
        newX , newY = x+deltaX, y+deltaY
        r = np.sqrt(newX**2+newY**2)
        if r <= 1.:
            inCircle += 1
            inSquare += 1
            x , y = newX, newY
        elif (abs(newX) <= 1. and abs(newY) <= 1.) and (r > 1.):
            inSquare += 1
            x, y = newX, newY
        elif (abs(newX) > 1.) or (abs(newY) > 1.) and (r > 1.):
            x, y = newX, newY
    return (4.*inCircle)/inSquare

nTrials = 1000
sumMet = 0
sumNon = 0
for i in xrange(nTrials):
    sumMet += Metropolis()
    sumNon += NotMetropolis()

print sumMet/nTrials
print sumNon/nTrials
